# bash completion for rnbd

_device_names()
{
	local cmd
	cmd="$2 devices list noheaders nototals mapping_path,devname notree"
	COMPREPLY=( $( compgen -W "$($cmd)" -- "$1" ) )
	return 0
}

_session_names()
{
	local cmd

	cmd="$2 sessions list noheaders nototals sessname notree"
	COMPREPLY=( $( compgen -W "$($cmd)" -- "$1" ) )
	return 0
}

_host_names()
{
	local cmd=$(saquery | grep NodeDescription | sed -e 's/.*\.\.*\([^ \.]*\).*/\1/')
	COMPREPLY=( $( compgen -W "$cmd" -- "$1" ) )
	return 0
}

_srv_names()
{
	local cmd

	cmd="$2 sessions list noheaders nototals srvname notree"
	COMPREPLY=( $( compgen -W "$($cmd)" -- "$1" ) )
	return 0
}

_path_names()
{
	local cmd

	cmd="$2 paths list noheaders nototals pathname notree"
	COMPREPLY=( $( compgen -W "$($cmd)" -- "$1" ) )
	return 0
}

_rnbd()
{
	local cur prev pprev ppprev cmd opts

	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	if ((COMP_CWORD > 1)); then
		pprev="${COMP_WORDS[COMP_CWORD-2]}"
		ocmd="${COMP_WORDS[0]} -c ${COMP_WORDS[@]:1:COMP_CWORD-1} "
	fi
	if ((COMP_CWORD > 2)); then
		ppprev="${COMP_WORDS[COMP_CWORD-2]}"
	fi

	opts=""

	COMPREPLY=()

	if ((COMP_CWORD == 1)); then
		opts="help list show dump client server device session path map resize unmap remap version"
		COMPREPLY=( $( compgen -W "${opts}" -- "${cur}" ) )
		return 0
	fi

	case ${prev} in
	client|clt)
		opts="$($ocmd) list show dump map resize unmap remap"
		;;
	server|srv)
		opts="$($ocmd) list show dump"
		;;
	sess|session|sessions|dev|devs|device|devices|path|paths)
		opts="$($ocmd) "
		;;
	list)
		opts="help csv xml json B K M G T P noheaders nototals all notree"
		;;
	help)
		opts="all"
		;;
	show)
		cmd="${COMP_WORDS[@]:0:COMP_CWORD-2} "
		case ${pprev} in
		device|dev)
			_device_names "$cur" "$cmd"
			;;
		path)
			_path_names "$cur" "$cmd"
			;;
		sess|session)
			_session_names "$cur" "$cmd"
			;;
		*)
			cmd="${COMP_WORDS[@]:0:COMP_CWORD-1} "
			_device_names "$cur" "$cmd"
			local TMP=( ${COMPREPLY[@]} )
			_path_names "$cur" "$cmd"
			TMP=( ${TMP[@]} ${COMPREPLY[@]} )
			_session_names "$cur" "$cmd"
			COMPREPLY=( ${TMP[@]} ${COMPREPLY[@]} )
			;;
		esac
		return 0
		;;
	add)
		cmd="${COMP_WORDS[@]:0:COMP_CWORD-2} "
		case ${pprev} in
		path|paths)
			_session_names "$cur" "$cmd"
			;;
		esac
		return 0
		;;
	reconnect|resize|unmap|remap|disconnect|delete)
		cmd="${COMP_WORDS[@]:0:COMP_CWORD-2} "
		case ${pprev} in
		sess|session|sessions)
			_session_names "$cur" "$cmd"
			;;
		cli|client|dev|devs|device|devices)
			_device_names "$cur" "$cmd"
			;;
		*rnbd)
			_device_names "$cur" "${COMP_WORDS[@]:0:COMP_CWORD-1} "
			;;
		path|paths)
			_path_names "$cur" "$cmd"
			;;
		esac
		return 0
		;;
	from)
		cmd="rnbd client"
		_session_names "$cur" "$cmd"
		local TMP=( ${COMPREPLY[@]} )
		_srv_names "$cur" "$cmd"
		COMPREPLY=( ${TMP[@]} ${COMPREPLY[@]} )
		_host_names "$cur" "$cmd"
		COMPREPLY=( ${TMP[@]} ${COMPREPLY[@]} )
		return 0
		;;
	esac

	case $pprev in
	show)
		opts="csv xml json B K M G T all"
		;;
	from)
		opts="ro rw migration verbose"
		;;
	unmap|remap)
		opts="force verbose"
		;;
	esac

	case $ppprev in
	map)
		opts="from"
		;;
	esac

	if [[ -n "$opts" ]]; then
		COMPREPLY=( $( compgen -W "${opts}" -- "$cur" ) )
		return 0
	fi
}

complete -F _rnbd rnbd
COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
